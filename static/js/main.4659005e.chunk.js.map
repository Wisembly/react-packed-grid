{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["usePackedGridLayout","boxAspectRatio","useState","numBoxes","setNumBoxes","layout","setLayout","containerRef","useRef","updateLayout","useCallback","el","width","height","rectAspectRatio","largestRect","useEffect","listener","window","PackedGrid","children","className","boxClassName","updateLayoutRef","React","ref","style","display","flexFlow","placeContent","maxWidth","maxHeight","GridItemPlaceholder","backgroundColor","border","App","focusRef","focus","aspectRatio","setAspectRatio","type","min","value","onChange","e","Number","parseInt","target","step","parseFloat","onClick","current","Array","from","length","map","_","idx","key","ReactDOM","render","document","getElementById"],"mappings":"2MAkCA,SAASA,EAAoB,QAC3BC,UAAyB,G,MAMOC,mBAAS,GAAlCC,OAAUC,O,EACWF,qBAArBG,OAAQC,OACTC,EAAeC,mBACfC,EAAeC,uBACnB,YAIE,GAHA,MAAIC,IACFJ,aAEEJ,KAAgBI,EAApB,QAA0C,CACxC,IAAMK,EAAQL,kCAAd,MACMM,EAASN,kCAAf,OACAD,GAjCmB,EAiCSM,EAjCpC,EAiC2CC,EAjC3C,EAiCmDV,OA7BjDW,KAJF,EAiCQR,KA7BNQ,EAA0B,GAEnBC,sBAAY,EAAD,MAAlB,KANF,IAA2B,EAA3B,QAoCI,CAACZ,EAXH,IAsBA,OATAa,qBAAU,WACRP,IACA,IAAMQ,EAAW,kBAAMR,KAEvB,OADAS,oCACO,WACLA,0CAED,CAPHF,IASO,CAACX,EAAQD,EAAhB,G,SAGce,K,IACdC,aACAC,cACAC,iBACAC,oB,EAG4CvB,EAF5CC,kBAEOI,OAAQD,OAAaK,OAmB5B,OAfAO,qBAAU,WACRZ,EAAYoB,mBAAZpB,MACC,CAFHY,IAIAA,qBAAU,WAIR,OAHA,IACEO,UAA0B,kBAAMd,MAE3B,WACL,IACEc,qBAGH,CAACd,EATJO,IAYE,yBACEK,UAAWA,EACXI,IAAKhB,EACLiB,MAAO,CACLC,QADK,OAELC,SAFK,WAGLC,aAAc,WAGf,oBAA6B,mBAC5B,yBACER,UAAWC,EACXI,MACErB,EACI,CACEsB,QADF,QAEEf,MAFF,OAGEC,OAHF,OAIEiB,SAAazB,EAAL,MAJV,KAKE0B,UAAc1B,EAAL,aAEX,CACEsB,QAAS,SAbS,OCrGpC,SAASK,EAAT,GAA2E,IAA5CZ,EAA2C,EAA3CA,SAC7B,OACE,yBACEM,MAAO,CACLO,gBAAiB,aACjBN,QAAS,OACTE,aAAc,SACdjB,MAAO,OACPC,OAAQ,OACRqB,OAAQ,oBAGTd,GAKP,IAsDee,EAtDH,WACV,IAAMZ,EAAkBf,mBAClB4B,EAAW1B,uBAAY,SAACC,GAC5BA,EAAG0B,UACF,IAJa,EAKgBnC,mBAAS,GALzB,mBAKTC,EALS,KAKCC,EALD,OAMsBF,mBAAS,GAN/B,mBAMToC,EANS,KAMIC,EANJ,KAQhB,OACE,oCACE,yBAAKlB,UAAU,YACb,uCAEE,2BACEI,IAAKW,EACLI,KAAK,SACLC,IAAI,IACJC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOxC,EAAYyC,OAAOC,SAASF,EAAEG,OAAOL,MAAO,SAGjE,8CAEE,2BACEjB,IAAKW,EACLI,KAAK,SACLQ,KAAK,MACLN,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAOL,EAAeM,OAAOI,WAAWL,EAAEG,OAAOL,YAG/D,4BACEQ,QAAS,WACH3B,EAAgB4B,SAClB5B,EAAgB4B,YAHtB,wBAUF,kBAAChC,EAAD,CACElB,eAAgBqC,EAChBjB,UAAU,aACVE,gBAAiBA,GAEhB6B,MAAMC,KAAK,CAAEC,OAAQnD,IAAYoD,KAAI,SAACC,EAAGC,GAAJ,OACpC,kBAACzB,EAAD,CAAqB0B,IAAKD,GAA1B,OAAoCA,EAAM,SC9DpDE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.4659005e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { largestRect } from 'rect-scaler'\n\ninterface Props {\n  children: React.ReactNode\n  className?: string\n  boxClassName?: string\n  updateLayoutRef?: React.MutableRefObject<(() => void) | undefined>\n  boxAspectRatio?: number\n}\n\ntype Layout = {\n  rows: number\n  cols: number\n  width: number\n  height: number\n  area: number\n}\n\nfunction recalculateLayout(\n  containerWidth: number,\n  containerHeight: number,\n  numRects: number,\n  rectAspectRatio: number = 1\n) {\n  return largestRect(\n    containerWidth,\n    containerHeight,\n    numRects,\n    rectAspectRatio,\n    1\n  )\n}\n\nfunction usePackedGridLayout(\n  boxAspectRatio: number = 1\n): [\n  Layout | undefined,\n  (numBoxes: number) => void,\n  (el?: HTMLDivElement | null) => void\n] {\n  const [numBoxes, setNumBoxes] = useState(0)\n  const [layout, setLayout] = useState<Layout>()\n  const containerRef = useRef<HTMLDivElement>()\n  const updateLayout = useCallback(\n    (el?: HTMLDivElement | null) => {\n      if (el != null) {\n        containerRef.current = el\n      }\n      if (numBoxes > 0 && containerRef.current) {\n        const width = containerRef.current.getBoundingClientRect().width\n        const height = containerRef.current.getBoundingClientRect().height\n        setLayout(recalculateLayout(width, height, numBoxes, boxAspectRatio))\n      }\n    },\n    [numBoxes, boxAspectRatio]\n  )\n  useEffect(() => {\n    updateLayout()\n    const listener = () => updateLayout()\n    window.addEventListener('resize', listener)\n    return () => {\n      window.removeEventListener('resize', listener)\n    }\n  }, [updateLayout])\n\n  return [layout, setNumBoxes, updateLayout]\n}\n\nexport function PackedGrid({\n  children,\n  className,\n  boxClassName,\n  updateLayoutRef,\n  boxAspectRatio\n}: Props) {\n  const [layout, setNumBoxes, updateLayout] = usePackedGridLayout(\n    boxAspectRatio\n  )\n\n  useEffect(() => {\n    setNumBoxes(React.Children.count(children))\n  }, [children])\n\n  useEffect(() => {\n    if (updateLayoutRef) {\n      updateLayoutRef.current = () => updateLayout()\n    }\n    return () => {\n      if (updateLayoutRef) {\n        updateLayoutRef.current = undefined\n      }\n    }\n  }, [updateLayout, updateLayoutRef])\n\n  return (\n    <div\n      className={className}\n      ref={updateLayout}\n      style={{\n        display: 'flex',\n        flexFlow: 'row wrap',\n        placeContent: 'center'\n      }}\n    >\n      {React.Children.map(children, (child) => (\n        <div\n          className={boxClassName}\n          style={\n            layout\n              ? {\n                  display: 'block',\n                  width: '100%',\n                  height: '100%',\n                  maxWidth: `${layout.width}px`,\n                  maxHeight: `${layout.height}px`\n                }\n              : {\n                  display: 'none'\n                }\n          }\n        >\n          {child}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React, { useState, useCallback, useRef } from 'react'\n\nimport { PackedGrid } from 'react-packed-grid'\n\nfunction GridItemPlaceholder({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      style={{\n        backgroundColor: 'whitesmoke',\n        display: 'grid',\n        placeContent: 'center',\n        width: '100%',\n        height: '100%',\n        border: '2px solid black'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst App = () => {\n  const updateLayoutRef = useRef<() => void>()\n  const focusRef = useCallback((el) => {\n    el.focus()\n  }, [])\n  const [numBoxes, setNumBoxes] = useState(1)\n  const [aspectRatio, setAspectRatio] = useState(1)\n\n  return (\n    <>\n      <div className='controls'>\n        <label>\n          Boxes\n          <input\n            ref={focusRef}\n            type='number'\n            min='1'\n            value={numBoxes}\n            onChange={(e) => setNumBoxes(Number.parseInt(e.target.value, 10))}\n          />\n        </label>\n        <label>\n          Aspect Ratio\n          <input\n            ref={focusRef}\n            type='number'\n            step='any'\n            value={aspectRatio}\n            onChange={(e) => setAspectRatio(Number.parseFloat(e.target.value))}\n          />\n        </label>\n        <button\n          onClick={() => {\n            if (updateLayoutRef.current) {\n              updateLayoutRef.current()\n            }\n          }}\n        >\n          Force Layout Update\n        </button>\n      </div>\n      <PackedGrid\n        boxAspectRatio={aspectRatio}\n        className='fullscreen'\n        updateLayoutRef={updateLayoutRef}\n      >\n        {Array.from({ length: numBoxes }).map((_, idx) => (\n          <GridItemPlaceholder key={idx}>Box {idx + 1}</GridItemPlaceholder>\n        ))}\n      </PackedGrid>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}